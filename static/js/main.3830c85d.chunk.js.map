{"version":3,"sources":["components/CustomInterval.js","pages/HomePage.js","components/App.js","serviceWorker.js","index.js","assets/common/images/Angular.jpg"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Thing","_useState","useState","_useState2","Object","slicedToArray","x","setX","_useState3","_useState4","y","setY","_useState5","_useState6","_useState7","_useState8","texture","THREE","load","im1","react_default","a","createElement","rotation-x","rotation-y","attach","args","object","Home","Fragment","style","height","width","backgroundColor","dist","App","className","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"sQAsBeA,MApBf,SAAqBC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAGtBC,oBAAU,WACNF,EAAcG,QAAUL,GACzB,CAACA,IAGJI,oBAAU,WAIN,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,YAJb,WACIL,EAAcG,WAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,MAEhC,CAACL,KCZR,SAASQ,IAAQ,IAAAC,EAEKC,mBAAS,GAFdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAEHI,EAFGJ,EAAA,GAAAK,EAGKN,mBAAS,GAHdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAKeV,oBAAS,GALxBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAObvB,EAAY,WACRiB,EAAKD,EAAI,IACTK,EAAKD,EAAI,KACV,KAVU,IAAAI,EAYeZ,oBAAS,GAZxBa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAcPE,GAdOD,EAAA,GAAAA,EAAA,IAcG,IAAIE,iBAAsBC,KAAKC,MAE/C,OACIC,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,QAAMC,aAAYjB,EAAGkB,aAAYd,GAC7BU,EAAAC,EAAAC,cAAA,qBAAmBG,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClDN,EAAAC,EAAAC,cAAA,qBAAmBG,OAAO,YACtBL,EAAAC,EAAAC,cAAA,aAAWG,OAAO,MAAME,OAAQX,OAuBrCY,MAff,WAEI,OACIR,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACIT,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,gBAAiB,cAC5Db,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAACtB,EAAD,QAGRoB,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,gBAAiB,iBC5B7DE,MAbf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,UAAQc,UAAU,cAAlB,UAGAhB,EAAAC,EAAAC,cAAA,QAAMc,UAAY,YAChBhB,EAAAC,EAAAC,cAACe,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3830c85d.chunk.js","sourcesContent":["import {useEffect, useRef } from 'react';\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n\r\nexport default useInterval","import React, { useState } from 'react';\r\nimport * as THREE from 'three'\r\nimport { Canvas } from 'react-three-fiber'\r\nimport im1 from '../assets/common/images/Angular.jpg'\r\nimport useInterval from '../components/CustomInterval'\r\n\r\n\r\nfunction Thing() {\r\n\r\n    const [x, setX] = useState(0);\r\n    const [y, setY] = useState(0);\r\n\r\n    const [active, setActive] = useState(false)\r\n\r\n    useInterval(() => {\r\n        setX(x + 0.2);\r\n        setY(y + 0.2);\r\n    }, 1000)\r\n\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const texture = new THREE.TextureLoader().load(im1)\r\n\r\n    return (\r\n        <group>\r\n            <mesh rotation-x={x} rotation-y={y} >\r\n                <boxBufferGeometry attach=\"geometry\" args={[3, 3, 3]} />\r\n                <meshBasicMaterial attach=\"material\"  >\r\n                    <primitive attach=\"map\" object={texture} />\r\n                </meshBasicMaterial>\r\n            </mesh>\r\n        </group>\r\n    )\r\n}\r\n\r\n\r\nfunction Home() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{ height: \"10rem\", width: \"10rem\", backgroundColor: \"lightgray\" }}>\r\n                <Canvas>\r\n                    <Thing />\r\n                </Canvas>\r\n            </div>\r\n            <div style={{ height: \"20rem\", width: \"20rem\", backgroundColor: \"lightgray\" }}>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport '../assets/css/App.css';\nimport Home from '../pages/HomePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Hello!\n      </header>\n      <main className = \"App-main\">\n        <Home />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Angular.86eac507.jpg\";"],"sourceRoot":""}